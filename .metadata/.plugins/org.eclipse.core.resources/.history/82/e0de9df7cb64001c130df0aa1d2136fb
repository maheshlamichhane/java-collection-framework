	Arrays: An array is a indexed collections of fixted numbers of homogenious data elements.
	 	the main advantage of arrays is we can represent multiple values by using single variable
	 	so that readibility of the code will be improved.
	 	Limitations of arrays:- 
	 	-> Arrays are fixed in size that is once we creates an array there is
	 	no chance of increasing or decreasing the size based on our requirement due to this,to use
	 	arrays concept compulsary we should know the size in advance which may not possible always.
	 	
	 	-> Array can hold only homogenious data type elements.
	 	Student[] st = new Student[10000];
	 	st[0]=new Student();
	 	st[1]=new Customer();
	 	it throws incompatible type exception.we can solve this by using Object type arrays.
	 	Object[] a = new Object[10000];
	 	a[0]= new Student();
	 	a[1]= new Customer(); 
	 	
	 	-> Arrays concept is not implemented based on some standard data structures and hence
	 	readymade method support is not available for every requirement we have to write the code
	 	explictly which increases complexity of programming.
	 	
	 	To overcome above problems of arrays we should go for collections concept.
	 	-> collections are growable in nature that is based on our requirement we can increase or
	 	decrease the size.
	 	-> collections can hold both homogenious and hetrogenious objects.
	 	-> every collections class is implemented based on some standard data structures hence for
	 	every requirement readymade method support is available.being a programmer we are responsible
	 	to use those methods and we are not responsible to implement those methods.
	 	
	 	Arrays vs Collections:
	 	-> fixed in size vs growable
	 	-> with respect to memory point of view arrays are not recomended vs with respect to memory
	 	collections are recomended.
	 	-> with respect to performance point of view arrays are recomended vs with respect to perfor
	 	mance collections are not recoomended.
	 	-> array can only hold homogenious objects vs collections can hold both homogenious and hetrogenous
	 	objects.
	 	->there is no support for underlying data structure support vs there is suppoort for 
	 	underlying data structure support.
	 	-> array can hold both primitives and objects but collections only hold objects not 
	 	primitive.
	 	
	 	Collections: if we want to represent a group of individual objects as a singly entity then
	 	we should go for collections.
	 	Collections Framewrok:it contains several classes and interfaces which can be used to 
	 	represent group of individual objects has a single entity.
	 	
	   9 Key Interfaces of Collections Framework:-
	   i. Collections
	   ii.	List
	   iii. Set
	   iv. SortedSet
	   v.	NavigableSet
	   vi. Queue
	   vii.	Map
	   viii. SortedMap
	   ix.NavigableMap
	   
	 Collections Interface:- 
	 if we want to represent a group of individual objects as a single entity then we should go for collections.
	 collections interface defines the most common methods which are applicable for any collection
	 objects.in general collections interface is considered as root interface of collections
	 framework.there is no concrete class which implements collections interface directly.
	 
	 collection is an interface.if we want to represent group of individual objects as a single
	 entity then we should go for collection.
	 collections is an utility class present in java.util package to define several utility methods
	 for collection objects like sorting,serching etc.
	 
	 List Interface:- it is the child interface of collections.if we want to represent group of
	 individual objects has a single entity where duplicates are allowed and insertion order must
	 be preserved then we should go for list interface.implementation classes of list interface are.
	 i. ArrayList
	 ii. LinkedList
	 iii. Vector
	 iv. Stack
	 
	 
	 Set Interface:- it is the child interface of Collection.if we want to represent a group of
	 individual objects as a single entity where duplicates are not allowed and insertion order not
	 required then we should go for set interface.implementation classes of set interfaces are.
	 i.	HashSet
	 	LinkedHashSet
	 
	 SortedSet Interface:- it is the child interface of set.if we want to represent a group of 
	 individual objects as a single entity where duplicates are not allowed and all objects should
	 be inserted according to some sorting order then we should go for sorted set.
	 
	 NavigableSet Interface: -
	 
	 
	 