Queue:-> 1.5 version enhancements(queue interface).it is the child interface of collection,list,set.if we want
to represent a group of individual objects prior to processing.then we should go for queue.for example before
sending sms message all mobile numbers we have to store all mobile numbers in some data structures.in which
order we added mobile numbers in the same order only message should be delivered for this FIFO requirement
queue is the best choice.
Usually queues follows FIFO order but based on our requirement we can implement our own priority order also(
priority queue).from 1.5 version onwards linked list class also implements queue interface.linked list based 
implementation of queue always follow FIFO order.queue interface specific methods.

Methods:->
boolean offer(Object o) to add an object into the queue
Object peek() to return head element of the queue. if queue is empty then this method returns null
Object element() to return head element of the queu.if queue is empty then this method raises RE:NoSuchElementException
Object poll() to remove and return head element of the queue.if queue is empty then this mehtod returns null.
Object remove() to remove and return head element of the queue.if queue is empty then this method raises RE:NoSuchElementException

Implementation class of Queue:->

PriorityQueue:->
-> if we want to represent a group of individual objects prior to processing according to some priority then we should go for
priority queue.
-> the priority can be either default natural sorting order or customizer sorting order defined by comparator.
-> insertion order is not preserved and it is based on some priority
-> duplicates objects are not allowed.
-> if we are depending on default natural sorting order compulsary the object should be homogenious and comparable otherwise we
will get runtime exception saying class cast exception.if we are defining our own sorting by comparator then object need not
be homogenious and comparable.
-> null is not allowed even as the first element also.
  